codeacademy
When using operators, it’s important to pay attention to data types. If we use two integers, it will return an integer every time. However, if we combine an integer with a double, the answer will be a double. Let’s look at the following example:
Console.WriteLine(5 / 3);
Console.WriteLine(5 / 3.0);
// prints 1
// prints 1.66667

If we need to use a decimal value, we have a few options: float, double, and decimal. These values are useful for anything that requires more precision than a whole number, like measuring the precise location of an object in 3D space.

A double is usually the best choice of the three because it is more precise than a float, but faster to process than a decimal. However, make sure to use a decimal for financial applications, since it is the most precise.

There are several built-in methods that we can use to manipulate numerical data and perform more complex mathematical calculations. Here are a few:
Math.Abs()—will find the absolute value of a number. Example: Math.Abs(-5) returns 5.
Math.Sqrt()—will find the square root of a number. Example: Math.Sqrt(16) returns 4.
Math.Floor()—will round the given double or decimal down to the nearest whole number. Example: Math.Floor(8.65) returns 8.
Math.Min()—returns the smaller of two numbers. Example: Math.Min(39, 12) returns 12.

esc chars
What happens when you need to include quotes in a string? You can use an escape sequence. An escape sequence places a backslash (\) before the inner quotation marks, so the program doesn’t read them accidentally as the end of sequence.
string withoutSlash = "Ifemelu said, "Hello!"";
string withSlash = "Ifemelu said, \"Hello!\"";
We can use escape character sequences to create a newline. That means that when we print the string to the console, it will print that line below the rest. If printed on its own, it will create an empty line. To create a newline, use the character combination \n.
string newLine = "Ifemelu walked \n to the park.";

string methods
Length
Since strings are composed of a set of characters, we can find out how many characters exist in a string with the .Length method. A common example is if we’re building a form and need to make sure a user submission doesn’t exceed a certain character length.
string userTweet = Console.ReadLine();
userTweet.Length; // returns the length of the tweet
We append the .Length property to a string that we have, such as a user’s tweet.
IndexOf
We can also find the position of a specific character or substring using .IndexOf(). This method is useful for searching to see if something exists in a string.
If it does exist within a string, the method will return the position of the search term in the larger string. Each character in a string has a unique position, like an address. Positions starts at 0 and increment by 1.
string word = "radio";
word.IndexOf("a"); // returns 1

.Substring() grabs part of a string using the specified character position, continues until the end of the string, and returns a new string. .IndexOf() is usually used first to get the specific character position.
string plantName = "Cactaceae, Cactus"; 
int charPosition = plantName.IndexOf("Cactus"); // returns 11
string commonName = plantName.Substring(charPosition); // returns Cactus
.Substring() is useful if we only want to use part of a string but keep the original data intact. So in this instance, we want to keep the string plantName, but just grab the "Cactus" portion of the string. We use .IndexOf() to find where "Cactus" starts, then use .Substring() with the position information to save "Cactus" to the new variable commonName.
We can also pass .Substring() a second argument, which will determine the number of characters in the resulting substring. For example, the following code shows how we can use .Substring() with two arguments to specify the length of our substring:
string name = "Codecademy"; 
int start = 2;
int length = 6;
string substringName = name.Substring(start, length); // returns 'decade'
Bracket Notation
Bracket notation is a style of syntax that uses brackets [] and an integer value to identify a particular value in a collection. In this case, we can use it to find a specific character in a string.
string plantName = "Cactaceae, Cactus";
int charPosition = plantName.IndexOf("u"); // returns 15
char u = plantName[charPosition]; // returns u
Similar to the example above, we first use .IndexOf() to grab the character position, which in this case is 15. We then take the string value and append it with a set of brackets [] and place the charPosition value inside the brackets.
ToUpper, ToLower
We can quickly change the case of our strings using the methods .ToUpper() and .ToLower(). These methods are useful if we want to make our text look like an e.e. cumming’s poem or make it appear like we forgot to turn off our caps lock key.
string shouting = "I'm not shouting, you're shouting".ToUpper();
Console.WriteLine(shouting);
// prints I'M NOT SHOUTING, YOU'RE SHOUTING.

overloading
What’s happening here is called method overloading, and each “version” is called an overload. Though they have the same name, the overloads are different because they have either (i) different parameter types or (ii) different number of parameters. This is useful if you want the same method to have different behavior based on its inputs.
Let’s examine this concept with these two overloads: Math.Round(Double, Int32) and Math.Round(Double).
The first overload, Math.Round(Double, Int32), rounds the double to the int‘s number of decimal points
Math.Round(3.14159, 2); // returns 3.14
The second, Math.Round(Double), rounds the double to the nearest integer.
Math.Round(3.14159); // returns 3
In C#, when we say that the methods are “different”, we are really talking about their method signatures, which is the method’s name and parameter types in order.
For example, both methods above are named Round(), but one has Double and Int32 parameters, and the other has a Double parameter.

method calls input
- Values passed to a method are called arguments. When defined in the method, they are parameters.
- Method parameters can only be used within the method body.
- Method parameters can be optional if given a default value using equals = syntax:
- static void VisitPlanets(int numberOfPlanets = 0)
- When calling a method, pass arguments by position or by name. If using names, use the colon (:) syntax:
- VisitPlanets(numberOfPlanets: 9);
- In method overloading, multiple methods can have the same name, as long as they have different method signatures.
- A method signature is a method’s name and parameter types in order.

expression-bodied definitions
We can rewrite this definition as an expression-bodied definition by:
removing the curly braces and return keyword, and
adding the “fat arrow”, or =>, which is composed of the equal sign, =, and greater than, >, symbols

lambda expressions
Generally lambda expressions with one expression (like the above example) take this form. They use the fat arrow, no curly braces, and no semicolon (;):
(input-parameters) => expression
Lambda expressions with more than one expression use curly braces and semicolon:
(input-parameters) => { statement; }
We just learned two new shortcuts “within” the lambda expression shortcut. Though we don’t need to use them all the time, we do need to recognize them in other developers’ code:
1. We can remove the parameter type if it can be inferred
2. We can remove the parentheses if there is one parameter

editing arrays
When we create the array with a known length but no known values, the array stores a default type value (0 for int, null for string). We then edit the array and swap out one of the default values with a new, specific value. In this case, we’re saying that at index 2 we want to swap the default value 0 for 8.
We can also edit the values of pre-existing arrays. Again, we can’t add to the length of an existing array, but we can swap out values:
int[] plantHeights = { 3, 4, 6 };
// plantHeights will be [3, 5, 6]
plantHeights[1] = 5; 

static members
In general, static means “associated with the class, not an instance”.
A static member is always accessed by the class name, rather than the instance name, like Forest.Area.
A static method cannot access non-static members.
A static constructor is run once per type, not per instance. It is invoked before the type is instantiated or a static member is accessed.
Either of these would trigger the static constructor of Forest:
public static void Main() {
  Forest f  = new Forest(); 
}
or

public static void Main() {
  Forest.Define(); 
}
A static class cannot be instantiated. Its members are accessed by the class name, like Math.PI